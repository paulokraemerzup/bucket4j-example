spring.cache.jcache.config = classpath:hazelcast.xml
spring.main.allow-bean-definition-overriding=true

# Bucket4J - rate limiting
# ----------------------------------------------------------------------------------------------------------------------
# enable/disable bucket4j support
bucket4j.enabled=true
# the name of the cache key
bucket4j.filters[0].cache-name=buckets
# [servlet,zuul,webflux]
bucket4j.filters[0].filter-method=servlet
# Per default the lowest integer plus 10. Set it to a number higher then zero to execute it after e.g. Spring Security.
bucket4j.filters[0].filter-order=1
bucket4j.filters[0].http-response-body={"message": "Too many requests"}
# a regular expression
bucket4j.filters[0].url=/hello
# [first, all] if multiple rate limits configured the 'first' strategy stops the processing after the first matching
bucket4j.filters[0].strategy=first
# if filter-key-type is expression the key can be retrieved by an Spring Expression Language
bucket4j.filters[0].rate-limits[0].expression=getRemoteAddr()
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=2
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=seconds
bucket4j.filters[0].rate-limits[0].bandwidths[0].fixed-refill-interval=5
bucket4j.filters[0].rate-limits[0].bandwidths[0].fixed-refill-interval-unit=seconds
# ----------------------------------------------------------------------------------------------------------------------
# the name of the cache key
bucket4j.filters[1].cache-name=buckets
# [servlet,zuul,webflux]
bucket4j.filters[1].filter-method=servlet
# Per default the lowest integer plus 10. Set it to a number higher then zero to execute it after e.g. Spring Security.
bucket4j.filters[1].filter-order=2
bucket4j.filters[1].http-response-body={"message": "Too many requests"}
# a regular expression
bucket4j.filters[1].url=/hell0
bucket4j.filters[1].metrics.enabled=true
bucket4j.filters[1].metrics.types=CONSUMED_COUNTER,REJECTED_COUNTER
bucket4j.filters[1].metrics.tags[0].key=IP
bucket4j.filters[1].metrics.tags[0].expression=getRemoteAddr()
bucket4j.filters[1].metrics.tags[0].types=REJECTED_COUNTER
bucket4j.filters[1].metrics.tags[1].key=URL
bucket4j.filters[1].metrics.tags[1].expression=getRequestURI()
bucket4j.filters[1].metrics.tags[2].key=USERNAME
bucket4j.filters[1].metrics.tags[2].expression="@securityService.username() != null ? @securityService.username() : 'anonym'"
bucket4j.filters[1].strategy=first
bucket4j.filters[1].rate-limits[0].expression=getRemoteAddr()
#bucket4j.filters[1].rate-limits[0].execute-condition=1==1
#bucket4j.filters[1].rate-limits[0].skip-condition=1==1
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=2
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=minutes
bucket4j.filters[1].rate-limits[0].bandwidths[0].fixed-refill-interval=10
bucket4j.filters[1].rate-limits[0].bandwidths[0].fixed-refill-interval-unit=seconds
# ----------------------------------------------------------------------------------------------------------------------